[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode unshaded, world_vertex_coords;

uniform sampler2D map;
uniform vec2 map_size;

vec2 rotate_space(vec2 uv, float angle) {
	angle = radians(angle);
	uv = uv - vec2(0.5);
	mat2 rot = mat2(vec2(sin(angle), -cos(angle)), vec2(cos(angle), sin(angle)));
	uv *= rot;
	uv = uv + vec2(0.5);
	return uv;
}

float box(vec2 pos, vec2 size, vec2 offset) {
	pos = pos + offset;
	vec2 edge = vec2(0.5) - size * 0.5;
    vec2 uv = smoothstep(edge, edge + vec2(0.001), pos);
    uv *= smoothstep(edge, edge + vec2(0.001), vec2(1.0) - pos);
    return uv.x * uv.y;
}

void fragment() {
	
	vec2 uv = fract(UV * map_size);
	vec4 textuv = texture(map, uv);
	int id = int(textuv.r) * 255;
	float col = 0.0;
	const int ids[8] = {128, 64, 32, 16, 8, 4, 2, 1};
	
	for (int i = 0; i < ids.length(); i++) {
		
		if (id >= ids[i]) {
			switch(ids[i]) {
			    case 1:
					col += box(uv, vec2(0.2, 0.5), vec2(0, 0.25));
			        break;
			    case 2:
					uv = rotate_space(uv, 45);
					col += box(uv, vec2(1.0, 0.2), vec2(-0.25, 0.0));
					uv = rotate_space(uv, 135);
					break;
			    case 4:
					col += box(uv, vec2(0.5, 0.2), vec2(-0.25, 0.0));
					break;
			    case 8:
					uv = rotate_space(uv, 45);
					col += box(uv, vec2(0.2, 1.0), vec2(0.0, -0.25));
					uv = rotate_space(uv, 135);
			        break;
				case 16:
					col += box(uv, vec2(0.2, 0.5), vec2(0.0, -0.25));
			        break;
				case 32:
					uv = rotate_space(uv, 45);
					col += box(uv, vec2(1.0, 0.2), vec2(0.25, 0.0));
					uv = rotate_space(uv, 135);
					break;
			    case 64:
					col += box(uv, vec2(0.5, 0.2), vec2(0.25, 0.0));
					break;
			    case 128:
					uv = rotate_space(uv, 45);
					col += box(uv, vec2(0.2, 1.0), vec2(0, 0.25));
					uv = rotate_space(uv, 135);
			        break;
			}
			id -= ids[i];
		}
	}
		
	ALBEDO = vec3(col);
	
}"
